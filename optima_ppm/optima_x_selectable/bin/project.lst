
bin/project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000057c  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000107  00800140  00800140  00000650  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000082  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000e5  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000613  00000000  00000000  00000eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000037f  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000582  00000000  00000000  0000183d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001a3  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000018d  00000000  00000000  00002033  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	c7 c1       	rjmp	.+910    	; 0x3b4 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec e7       	ldi	r30, 0x7C	; 124
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 34       	cpi	r26, 0x40	; 64
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	12 e0       	ldi	r17, 0x02	; 2
  58:	a0 e4       	ldi	r26, 0x40	; 64
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 34       	cpi	r26, 0x47	; 71
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	5d d0       	rcall	.+186    	; 0x122 <main>
  68:	87 c2       	rjmp	.+1294   	; 0x578 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <mode_setup>:
void mode_setup(void)
{
	uint8_t i;
	uint16_t j;
	
	*outputs[MODE].port |= outputs[MODE].mask;
  6c:	e0 91 03 01 	lds	r30, 0x0103
  70:	f0 91 04 01 	lds	r31, 0x0104
  74:	80 81       	ld	r24, Z
  76:	90 91 00 01 	lds	r25, 0x0100
  7a:	89 2b       	or	r24, r25
  7c:	80 83       	st	Z, r24
	
	delay(737);
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	86 bb       	out	0x16, r24	; 22
  82:	10 92 85 00 	sts	0x0085, r1
  86:	10 92 84 00 	sts	0x0084, r1
  8a:	81 ee       	ldi	r24, 0xE1	; 225
  8c:	92 e0       	ldi	r25, 0x02	; 2
  8e:	90 93 89 00 	sts	0x0089, r25
  92:	80 93 88 00 	sts	0x0088, r24
  96:	b1 9b       	sbis	0x16, 1	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <mode_setup+0x2a>
	for(j = 0; j < 50000; ++j) {
		if(!(*outputs[MODE].pin & outputs[MODE].mask))
  9a:	e0 91 01 01 	lds	r30, 0x0101
  9e:	f0 91 02 01 	lds	r31, 0x0102
  a2:	90 91 00 01 	lds	r25, 0x0100
  a6:	40 91 40 01 	lds	r20, 0x0140
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	89 23       	and	r24, r25
  b2:	09 f4       	brne	.+2      	; 0xb6 <mode_setup+0x4a>
  b4:	41 e0       	ldi	r20, 0x01	; 1
	uint16_t j;
	
	*outputs[MODE].port |= outputs[MODE].mask;
	
	delay(737);
	for(j = 0; j < 50000; ++j) {
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	83 ec       	ldi	r24, 0xC3	; 195
  bc:	20 35       	cpi	r18, 0x50	; 80
  be:	38 07       	cpc	r19, r24
  c0:	b1 f7       	brne	.-20     	; 0xae <mode_setup+0x42>
  c2:	40 93 40 01 	sts	0x0140, r20
		if(!(*outputs[MODE].pin & outputs[MODE].mask))
			ppm_flag = 1;
	}
	
	*outputs[MODE].port &= ~outputs[MODE].mask;
  c6:	e0 91 03 01 	lds	r30, 0x0103
  ca:	f0 91 04 01 	lds	r31, 0x0104
  ce:	80 81       	ld	r24, Z
  d0:	90 95       	com	r25
  d2:	98 23       	and	r25, r24
  d4:	90 83       	st	Z, r25
	
	if(ppm_flag) {
  d6:	44 23       	and	r20, r20
  d8:	51 f0       	breq	.+20     	; 0xee <mode_setup+0x82>
		/* ppm mode */
		*outputs[PPM].ddr |= outputs[PPM].mask;
  da:	e0 91 28 01 	lds	r30, 0x0128
  de:	f0 91 29 01 	lds	r31, 0x0129
  e2:	80 81       	ld	r24, Z
  e4:	90 91 23 01 	lds	r25, 0x0123
  e8:	89 2b       	or	r24, r25
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b1 e0       	ldi	r27, 0x01	; 1
	} else {
		/* pwm mode */
		/* initialise output - only on those that are available*/
		for(i = 0; i < OPTIMA; ++i) {
			*outputs[i].ddr |= outputs[i].mask;
  f2:	15 96       	adiw	r26, 0x05	; 5
  f4:	ed 91       	ld	r30, X+
  f6:	fc 91       	ld	r31, X
  f8:	16 97       	sbiw	r26, 0x06	; 6
  fa:	80 81       	ld	r24, Z
  fc:	9c 91       	ld	r25, X
  fe:	89 2b       	or	r24, r25
 100:	80 83       	st	Z, r24
 102:	17 96       	adiw	r26, 0x07	; 7
		/* ppm mode */
		*outputs[PPM].ddr |= outputs[PPM].mask;
	} else {
		/* pwm mode */
		/* initialise output - only on those that are available*/
		for(i = 0; i < OPTIMA; ++i) {
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	aa 32       	cpi	r26, 0x2A	; 42
 108:	b8 07       	cpc	r27, r24
 10a:	99 f7       	brne	.-26     	; 0xf2 <mode_setup+0x86>
 10c:	08 95       	ret

0000010e <timer_init>:
	
}

void timer_init(void)
{
	OCR1A = 0xFFFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	90 93 89 00 	sts	0x0089, r25
 116:	80 93 88 00 	sts	0x0088, r24
	/* start TIMER1 with no prescaler */
	TCCR1B = ( 1 << CS10 );
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 81 00 	sts	0x0081, r24
 120:	08 95       	ret

00000122 <main>:
#define delay(period) TIFR1 = (1 << OCF1A); TCNT1 = 0; OCR1A = period; while(!(TIFR1 & (1 << OCF1A)));
void mode_setup(void);
void timer_init(void);

int main(void)
{	
 122:	a4 e2       	ldi	r26, 0x24	; 36
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e6 e9       	ldi	r30, 0x96	; 150
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	0a c2       	rjmp	.+1044   	; 0x540 <__prologue_saves__>
	
}

void timer_init(void)
{
	OCR1A = 0xFFFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	9f ef       	ldi	r25, 0xFF	; 255
 130:	90 93 89 00 	sts	0x0089, r25
 134:	80 93 88 00 	sts	0x0088, r24
	/* start TIMER1 with no prescaler */
	TCCR1B = ( 1 << CS10 );
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 81 00 	sts	0x0081, r24

int main(void)
{	
	/* Initialisation here */
	timer_init();
	mode_setup();
 13e:	96 df       	rcall	.-212    	; 0x6c <mode_setup>
	usart_init();
 140:	1d d1       	rcall	.+570    	; 0x37c <usart_init>
	/* State variable */
	enum states state = START;
	uint8_t i;
	uint8_t byte;
	uint8_t buffer[2 * NUM_CHANNELS];
	uint16_t inputs[NUM_CHANNELS] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 142:	fe 01       	movw	r30, r28
 144:	73 96       	adiw	r30, 0x13	; 19
 146:	82 e1       	ldi	r24, 0x12	; 18
 148:	df 01       	movw	r26, r30
 14a:	1d 92       	st	X+, r1
 14c:	8a 95       	dec	r24
 14e:	e9 f7       	brne	.-6      	; 0x14a <main+0x28>
	
	sei();
 150:	78 94       	sei
 152:	00 e0       	ldi	r16, 0x00	; 0
 154:	10 e0       	ldi	r17, 0x00	; 0
					} else {
						state = START;
					}
					break;
				case PACKET: // Fill the buffer with the packet values
					buffer[i++] = byte;
 156:	3e 01       	movw	r6, r28
 158:	08 94       	sec
 15a:	61 1c       	adc	r6, r1
 15c:	71 1c       	adc	r7, r1
 15e:	43 e1       	ldi	r20, 0x13	; 19
 160:	84 2e       	mov	r8, r20
 162:	91 2c       	mov	r9, r1
 164:	8c 0e       	add	r8, r28
 166:	9d 1e       	adc	r9, r29
								inputs[i] = ((uint16_t)(buffer[2*i] << 8) | (uint16_t)buffer[2*i+1]);
							}
							for(i = 0; i < NUM_CHANNELS; ++i) {
								/* pwm delta */
								*outputs[i].port |= outputs[i].mask;
								delay(inputs[i]);
 168:	32 e0       	ldi	r19, 0x02	; 2
 16a:	e3 2e       	mov	r14, r19
							for(i = 0; i < PPM_CHANNELS; ++i) {
								/* ppm pre-pulse */
								*outputs[PPM].port |= outputs[PPM].mask;
								if(i < OPTIMA - 1)
									*outputs[i].port |= outputs[i].mask;
								delay(PPM_PRE_PULSE);
 16c:	25 e8       	ldi	r18, 0x85	; 133
 16e:	42 2e       	mov	r4, r18
 170:	2b e0       	ldi	r18, 0x0B	; 11
 172:	52 2e       	mov	r5, r18
							*outputs[PPM].port |= outputs[PPM].mask;
							delay(PPM_PRE_PULSE);

							/* ppm sync period */
							*outputs[PPM].port &= ~outputs[PPM].mask;
							delay(PPM_SYNC_PERIOD);
 174:	96 ef       	ldi	r25, 0xF6	; 246
 176:	29 2e       	mov	r2, r25
 178:	98 e7       	ldi	r25, 0x78	; 120
 17a:	39 2e       	mov	r3, r25
 17c:	05 c0       	rjmp	.+10     	; 0x188 <main+0x66>
	uint8_t i;
	uint8_t byte;
	uint8_t buffer[2 * NUM_CHANNELS];
	uint16_t inputs[NUM_CHANNELS] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
	
	sei();
 17e:	01 e0       	ldi	r16, 0x01	; 1
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0x66>
 184:	00 e0       	ldi	r16, 0x00	; 0
 186:	10 e0       	ldi	r17, 0x00	; 0
	
	/* main loop */
	for (;;) {
		/* We have a character, do something */
		if(!q_empty(usart_rx)) {
 188:	e0 91 45 02 	lds	r30, 0x0245
 18c:	f0 91 46 02 	lds	r31, 0x0246
 190:	22 81       	ldd	r18, Z+2	; 0x02
 192:	33 81       	ldd	r19, Z+3	; 0x03
 194:	80 81       	ld	r24, Z
 196:	91 81       	ldd	r25, Z+1	; 0x01
 198:	28 17       	cp	r18, r24
 19a:	39 07       	cpc	r19, r25
 19c:	c9 f3       	breq	.-14     	; 0x190 <main+0x6e>
			byte = q_take(usart_rx);
 19e:	cf 01       	movw	r24, r30
 1a0:	68 d1       	rcall	.+720    	; 0x472 <q_take>
			switch(state)
 1a2:	01 30       	cpi	r16, 0x01	; 1
 1a4:	11 05       	cpc	r17, r1
 1a6:	69 f0       	breq	.+26     	; 0x1c2 <main+0xa0>
 1a8:	01 30       	cpi	r16, 0x01	; 1
 1aa:	11 05       	cpc	r17, r1
 1ac:	38 f0       	brcs	.+14     	; 0x1bc <main+0x9a>
 1ae:	02 30       	cpi	r16, 0x02	; 2
 1b0:	11 05       	cpc	r17, r1
 1b2:	69 f0       	breq	.+26     	; 0x1ce <main+0xac>
 1b4:	03 30       	cpi	r16, 0x03	; 3
 1b6:	11 05       	cpc	r17, r1
 1b8:	29 f7       	brne	.-54     	; 0x184 <main+0x62>
 1ba:	14 c0       	rjmp	.+40     	; 0x1e4 <main+0xc2>
			{
				case START: // A packet is arriving
					if(byte == 0xFF) {
 1bc:	8f 3f       	cpi	r24, 0xFF	; 255
 1be:	21 f7       	brne	.-56     	; 0x188 <main+0x66>
 1c0:	de cf       	rjmp	.-68     	; 0x17e <main+0x5c>
						state = PREAMBLE;
					}		
					break;
				case PREAMBLE: // The packet begins on the next byte
					if(byte == 0xFF) {
 1c2:	8f 3f       	cpi	r24, 0xFF	; 255
 1c4:	f9 f6       	brne	.-66     	; 0x184 <main+0x62>
 1c6:	02 e0       	ldi	r16, 0x02	; 2
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	ff 24       	eor	r15, r15
 1cc:	dd cf       	rjmp	.-70     	; 0x188 <main+0x66>
					} else {
						state = START;
					}
					break;
				case PACKET: // Fill the buffer with the packet values
					buffer[i++] = byte;
 1ce:	f3 01       	movw	r30, r6
 1d0:	ef 0d       	add	r30, r15
 1d2:	f1 1d       	adc	r31, r1
 1d4:	80 83       	st	Z, r24
 1d6:	f3 94       	inc	r15
					if(i >= 2 * NUM_CHANNELS) {
 1d8:	b1 e1       	ldi	r27, 0x11	; 17
 1da:	bf 15       	cp	r27, r15
 1dc:	a8 f6       	brcc	.-86     	; 0x188 <main+0x66>
 1de:	03 e0       	ldi	r16, 0x03	; 3
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	d2 cf       	rjmp	.-92     	; 0x188 <main+0x66>
						// We have received the channel data
						state = VERIFY;
					}
					break;
				case VERIFY: // Verify the packet has finished
					if(byte == 0xEE) {
 1e4:	8e 3e       	cpi	r24, 0xEE	; 238
 1e6:	71 f6       	brne	.-100    	; 0x184 <main+0x62>
						if(ppm_flag) { /******************************************** PPM ***/
 1e8:	80 91 40 01 	lds	r24, 0x0140
 1ec:	88 23       	and	r24, r24
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <main+0xd0>
 1f0:	89 c0       	rjmp	.+274    	; 0x304 <__stack+0x5>
 1f2:	f3 01       	movw	r30, r6
 1f4:	94 01       	movw	r18, r8
 1f6:	d4 01       	movw	r26, r8
							// Fill the input values with the adjusted channel timing
							for(i = 0; i < NUM_CHANNELS; ++i) {
								inputs[i] = ((uint16_t)(buffer[2*i] << 8) | (uint16_t)buffer[2*i+1]) - PPM_PRE_PULSE;
 1f8:	d0 80       	ld	r13, Z
 1fa:	cc 24       	eor	r12, r12
 1fc:	81 81       	ldd	r24, Z+1	; 0x01
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	8c 29       	or	r24, r12
 202:	9d 29       	or	r25, r13
 204:	85 58       	subi	r24, 0x85	; 133
 206:	9b 40       	sbci	r25, 0x0B	; 11
 208:	8d 93       	st	X+, r24
 20a:	9d 93       	st	X+, r25
 20c:	32 96       	adiw	r30, 0x02	; 2
					break;
				case VERIFY: // Verify the packet has finished
					if(byte == 0xEE) {
						if(ppm_flag) { /******************************************** PPM ***/
							// Fill the input values with the adjusted channel timing
							for(i = 0; i < NUM_CHANNELS; ++i) {
 20e:	e8 15       	cp	r30, r8
 210:	f9 05       	cpc	r31, r9
 212:	91 f7       	brne	.-28     	; 0x1f8 <main+0xd6>
 214:	a0 e0       	ldi	r26, 0x00	; 0
 216:	b1 e0       	ldi	r27, 0x01	; 1
 218:	ff 24       	eor	r15, r15
								inputs[i] = ((uint16_t)(buffer[2*i] << 8) | (uint16_t)buffer[2*i+1]) - PPM_PRE_PULSE;
							}
							for(i = 0; i < PPM_CHANNELS; ++i) {
								/* ppm pre-pulse */
								*outputs[PPM].port |= outputs[PPM].mask;
 21a:	e0 91 26 01 	lds	r30, 0x0126
 21e:	f0 91 27 01 	lds	r31, 0x0127
 222:	80 81       	ld	r24, Z
 224:	90 91 23 01 	lds	r25, 0x0123
 228:	89 2b       	or	r24, r25
 22a:	80 83       	st	Z, r24
								if(i < OPTIMA - 1)
 22c:	e4 e0       	ldi	r30, 0x04	; 4
 22e:	ef 15       	cp	r30, r15
 230:	40 f0       	brcs	.+16     	; 0x242 <main+0x120>
									*outputs[i].port |= outputs[i].mask;
 232:	13 96       	adiw	r26, 0x03	; 3
 234:	ed 91       	ld	r30, X+
 236:	fc 91       	ld	r31, X
 238:	14 97       	sbiw	r26, 0x04	; 4
 23a:	80 81       	ld	r24, Z
 23c:	9c 91       	ld	r25, X
 23e:	89 2b       	or	r24, r25
 240:	80 83       	st	Z, r24
								delay(PPM_PRE_PULSE);
 242:	e6 ba       	out	0x16, r14	; 22
 244:	10 92 85 00 	sts	0x0085, r1
 248:	10 92 84 00 	sts	0x0084, r1
 24c:	50 92 89 00 	sts	0x0089, r5
 250:	40 92 88 00 	sts	0x0088, r4
 254:	b1 9b       	sbis	0x16, 1	; 22
 256:	fe cf       	rjmp	.-4      	; 0x254 <main+0x132>
	
								/* end of pre-pulse */
								*outputs[PPM].port &= ~outputs[PPM].mask;
 258:	e0 91 26 01 	lds	r30, 0x0126
 25c:	f0 91 27 01 	lds	r31, 0x0127
 260:	90 81       	ld	r25, Z
 262:	80 91 23 01 	lds	r24, 0x0123
 266:	80 95       	com	r24
 268:	89 23       	and	r24, r25
 26a:	80 83       	st	Z, r24
								delay(inputs[i]);
 26c:	e6 ba       	out	0x16, r14	; 22
 26e:	10 92 85 00 	sts	0x0085, r1
 272:	10 92 84 00 	sts	0x0084, r1
 276:	f9 01       	movw	r30, r18
 278:	80 81       	ld	r24, Z
 27a:	91 81       	ldd	r25, Z+1	; 0x01
 27c:	90 93 89 00 	sts	0x0089, r25
 280:	80 93 88 00 	sts	0x0088, r24
 284:	b1 9b       	sbis	0x16, 1	; 22
 286:	fe cf       	rjmp	.-4      	; 0x284 <main+0x162>
	
								/* end of channel timing */
								if(i < OPTIMA - 1)
 288:	f4 e0       	ldi	r31, 0x04	; 4
 28a:	ff 15       	cp	r31, r15
 28c:	48 f0       	brcs	.+18     	; 0x2a0 <main+0x17e>
									*outputs[i].port &= ~outputs[i].mask;
 28e:	13 96       	adiw	r26, 0x03	; 3
 290:	ed 91       	ld	r30, X+
 292:	fc 91       	ld	r31, X
 294:	14 97       	sbiw	r26, 0x04	; 4
 296:	90 81       	ld	r25, Z
 298:	8c 91       	ld	r24, X
 29a:	80 95       	com	r24
 29c:	89 23       	and	r24, r25
 29e:	80 83       	st	Z, r24
						if(ppm_flag) { /******************************************** PPM ***/
							// Fill the input values with the adjusted channel timing
							for(i = 0; i < NUM_CHANNELS; ++i) {
								inputs[i] = ((uint16_t)(buffer[2*i] << 8) | (uint16_t)buffer[2*i+1]) - PPM_PRE_PULSE;
							}
							for(i = 0; i < PPM_CHANNELS; ++i) {
 2a0:	f3 94       	inc	r15
 2a2:	17 96       	adiw	r26, 0x07	; 7
 2a4:	2e 5f       	subi	r18, 0xFE	; 254
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	f8 16       	cp	r15, r24
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <main+0x18e>
 2ae:	b5 cf       	rjmp	.-150    	; 0x21a <main+0xf8>
								/* end of channel timing */
								if(i < OPTIMA - 1)
									*outputs[i].port &= ~outputs[i].mask;
							}
							/* ppm sync pulse */
							*outputs[PPM].port |= outputs[PPM].mask;
 2b0:	e0 91 26 01 	lds	r30, 0x0126
 2b4:	f0 91 27 01 	lds	r31, 0x0127
 2b8:	80 81       	ld	r24, Z
 2ba:	90 91 23 01 	lds	r25, 0x0123
 2be:	89 2b       	or	r24, r25
 2c0:	80 83       	st	Z, r24
							delay(PPM_PRE_PULSE);
 2c2:	e6 ba       	out	0x16, r14	; 22
 2c4:	10 92 85 00 	sts	0x0085, r1
 2c8:	10 92 84 00 	sts	0x0084, r1
 2cc:	50 92 89 00 	sts	0x0089, r5
 2d0:	40 92 88 00 	sts	0x0088, r4
 2d4:	b1 9b       	sbis	0x16, 1	; 22
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <main+0x1b2>

							/* ppm sync period */
							*outputs[PPM].port &= ~outputs[PPM].mask;
 2d8:	e0 91 26 01 	lds	r30, 0x0126
 2dc:	f0 91 27 01 	lds	r31, 0x0127
 2e0:	90 81       	ld	r25, Z
 2e2:	80 91 23 01 	lds	r24, 0x0123
 2e6:	80 95       	com	r24
 2e8:	89 23       	and	r24, r25
 2ea:	80 83       	st	Z, r24
							delay(PPM_SYNC_PERIOD);
 2ec:	e6 ba       	out	0x16, r14	; 22
 2ee:	10 92 85 00 	sts	0x0085, r1
 2f2:	10 92 84 00 	sts	0x0084, r1
 2f6:	30 92 89 00 	sts	0x0089, r3
 2fa:	20 92 88 00 	sts	0x0088, r2
 2fe:	b1 9b       	sbis	0x16, 1	; 22
 300:	fe cf       	rjmp	.-4      	; 0x2fe <main+0x1dc>
 302:	40 cf       	rjmp	.-384    	; 0x184 <main+0x62>
 304:	f3 01       	movw	r30, r6
 306:	94 01       	movw	r18, r8
 308:	d4 01       	movw	r26, r8
						} else { /******************************************** PWM **/
							// Fill the input values with the channel timing
							for(i = 0; i < NUM_CHANNELS; ++i) {
								inputs[i] = ((uint16_t)(buffer[2*i] << 8) | (uint16_t)buffer[2*i+1]);
 30a:	b0 80       	ld	r11, Z
 30c:	aa 24       	eor	r10, r10
 30e:	81 81       	ldd	r24, Z+1	; 0x01
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	8a 29       	or	r24, r10
 314:	9b 29       	or	r25, r11
 316:	8d 93       	st	X+, r24
 318:	9d 93       	st	X+, r25
 31a:	32 96       	adiw	r30, 0x02	; 2
							/* ppm sync period */
							*outputs[PPM].port &= ~outputs[PPM].mask;
							delay(PPM_SYNC_PERIOD);
						} else { /******************************************** PWM **/
							// Fill the input values with the channel timing
							for(i = 0; i < NUM_CHANNELS; ++i) {
 31c:	e8 15       	cp	r30, r8
 31e:	f9 05       	cpc	r31, r9
 320:	a1 f7       	brne	.-24     	; 0x30a <__stack+0xb>
 322:	a0 e0       	ldi	r26, 0x00	; 0
 324:	b1 e0       	ldi	r27, 0x01	; 1
								inputs[i] = ((uint16_t)(buffer[2*i] << 8) | (uint16_t)buffer[2*i+1]);
							}
							for(i = 0; i < NUM_CHANNELS; ++i) {
								/* pwm delta */
								*outputs[i].port |= outputs[i].mask;
 326:	13 96       	adiw	r26, 0x03	; 3
 328:	ed 91       	ld	r30, X+
 32a:	fc 91       	ld	r31, X
 32c:	14 97       	sbiw	r26, 0x04	; 4
 32e:	80 81       	ld	r24, Z
 330:	9c 91       	ld	r25, X
 332:	89 2b       	or	r24, r25
 334:	80 83       	st	Z, r24
								delay(inputs[i]);
 336:	e6 ba       	out	0x16, r14	; 22
 338:	10 92 85 00 	sts	0x0085, r1
 33c:	10 92 84 00 	sts	0x0084, r1
 340:	f9 01       	movw	r30, r18
 342:	80 81       	ld	r24, Z
 344:	91 81       	ldd	r25, Z+1	; 0x01
 346:	90 93 89 00 	sts	0x0089, r25
 34a:	80 93 88 00 	sts	0x0088, r24
 34e:	b1 9b       	sbis	0x16, 1	; 22
 350:	fe cf       	rjmp	.-4      	; 0x34e <__stack+0x4f>
								*outputs[i].port &= ~outputs[i].mask;
 352:	13 96       	adiw	r26, 0x03	; 3
 354:	ed 91       	ld	r30, X+
 356:	fc 91       	ld	r31, X
 358:	14 97       	sbiw	r26, 0x04	; 4
 35a:	90 81       	ld	r25, Z
 35c:	8c 91       	ld	r24, X
 35e:	80 95       	com	r24
 360:	89 23       	and	r24, r25
 362:	80 83       	st	Z, r24
 364:	17 96       	adiw	r26, 0x07	; 7
 366:	2e 5f       	subi	r18, 0xFE	; 254
 368:	3f 4f       	sbci	r19, 0xFF	; 255
						} else { /******************************************** PWM **/
							// Fill the input values with the channel timing
							for(i = 0; i < NUM_CHANNELS; ++i) {
								inputs[i] = ((uint16_t)(buffer[2*i] << 8) | (uint16_t)buffer[2*i+1]);
							}
							for(i = 0; i < NUM_CHANNELS; ++i) {
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	af 33       	cpi	r26, 0x3F	; 63
 36e:	bf 07       	cpc	r27, r31
 370:	d1 f6       	brne	.-76     	; 0x326 <__stack+0x27>
 372:	00 e0       	ldi	r16, 0x00	; 0
 374:	10 e0       	ldi	r17, 0x00	; 0
 376:	89 e0       	ldi	r24, 0x09	; 9
 378:	f8 2e       	mov	r15, r24
 37a:	06 cf       	rjmp	.-500    	; 0x188 <main+0x66>

0000037c <usart_init>:
volatile struct cqueue usart_rx_s;

void usart_init()
{
	/* set up receive queue */
	usart_rx = &usart_rx_s;
 37c:	81 e4       	ldi	r24, 0x41	; 65
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	90 93 46 02 	sts	0x0246, r25
 384:	80 93 45 02 	sts	0x0245, r24
	usart_rx->front = USART_BUFF/2;
 388:	80 e8       	ldi	r24, 0x80	; 128
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	90 93 42 01 	sts	0x0142, r25
 390:	80 93 41 01 	sts	0x0141, r24
	usart_rx->back = USART_BUFF/2;
 394:	90 93 44 01 	sts	0x0144, r25
 398:	80 93 43 01 	sts	0x0143, r24
	
	/* Asynchronous, no parity, 1 stop bit, 8 bit character size */
	UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	80 93 c2 00 	sts	0x00C2, r24
	
	/* Set baud rate */
	UBRR0H = (uint8_t)(MYUBR>>8);
 3a2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)MYUBR;
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable receive, receive complete interrupt*/
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0);
 3ac:	80 e9       	ldi	r24, 0x90	; 144
 3ae:	80 93 c1 00 	sts	0x00C1, r24
}
 3b2:	08 95       	ret

000003b4 <__vector_18>:

ISR(USART_RX_vect)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
	uint8_t ch = UDR0;
 3ce:	80 91 c6 00 	lds	r24, 0x00C6
	q_put(usart_rx, ch);
 3d2:	a0 91 45 02 	lds	r26, 0x0245
 3d6:	b0 91 46 02 	lds	r27, 0x0246
}

void q_put(volatile struct cqueue *q, uint8_t ch)
{
	/* if buffer overflows the queue automatically resets -> back == front */
	q->array[q->back++] = ch;
 3da:	12 96       	adiw	r26, 0x02	; 2
 3dc:	2d 91       	ld	r18, X+
 3de:	3c 91       	ld	r19, X
 3e0:	13 97       	sbiw	r26, 0x03	; 3
 3e2:	fd 01       	movw	r30, r26
 3e4:	e2 0f       	add	r30, r18
 3e6:	f3 1f       	adc	r31, r19
 3e8:	84 83       	std	Z+4, r24	; 0x04
 3ea:	2f 5f       	subi	r18, 0xFF	; 255
 3ec:	3f 4f       	sbci	r19, 0xFF	; 255
 3ee:	13 96       	adiw	r26, 0x03	; 3
 3f0:	3c 93       	st	X, r19
 3f2:	2e 93       	st	-X, r18
 3f4:	12 97       	sbiw	r26, 0x02	; 2
 3f6:	0a c0       	rjmp	.+20     	; 0x40c <__vector_18+0x58>
	while (q->back >= USART_BUFF) q->back -= USART_BUFF;
 3f8:	12 96       	adiw	r26, 0x02	; 2
 3fa:	8d 91       	ld	r24, X+
 3fc:	9c 91       	ld	r25, X
 3fe:	13 97       	sbiw	r26, 0x03	; 3
 400:	80 50       	subi	r24, 0x00	; 0
 402:	91 40       	sbci	r25, 0x01	; 1
 404:	13 96       	adiw	r26, 0x03	; 3
 406:	9c 93       	st	X, r25
 408:	8e 93       	st	-X, r24
 40a:	12 97       	sbiw	r26, 0x02	; 2
 40c:	12 96       	adiw	r26, 0x02	; 2
 40e:	8d 91       	ld	r24, X+
 410:	9c 91       	ld	r25, X
 412:	13 97       	sbiw	r26, 0x03	; 3
 414:	8f 3f       	cpi	r24, 0xFF	; 255
 416:	91 05       	cpc	r25, r1
 418:	09 f0       	breq	.+2      	; 0x41c <__vector_18+0x68>
 41a:	70 f7       	brcc	.-36     	; 0x3f8 <__vector_18+0x44>

ISR(USART_RX_vect)
{
	uint8_t ch = UDR0;
	q_put(usart_rx, ch);
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <q_put>:

void q_put(volatile struct cqueue *q, uint8_t ch)
{
 436:	dc 01       	movw	r26, r24
	/* if buffer overflows the queue automatically resets -> back == front */
	q->array[q->back++] = ch;
 438:	12 96       	adiw	r26, 0x02	; 2
 43a:	8d 91       	ld	r24, X+
 43c:	9c 91       	ld	r25, X
 43e:	13 97       	sbiw	r26, 0x03	; 3
 440:	fd 01       	movw	r30, r26
 442:	e8 0f       	add	r30, r24
 444:	f9 1f       	adc	r31, r25
 446:	64 83       	std	Z+4, r22	; 0x04
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	06 c0       	rjmp	.+12     	; 0x458 <q_put+0x22>
	while (q->back >= USART_BUFF) q->back -= USART_BUFF;
 44c:	12 96       	adiw	r26, 0x02	; 2
 44e:	8d 91       	ld	r24, X+
 450:	9c 91       	ld	r25, X
 452:	13 97       	sbiw	r26, 0x03	; 3
 454:	80 50       	subi	r24, 0x00	; 0
 456:	91 40       	sbci	r25, 0x01	; 1
 458:	13 96       	adiw	r26, 0x03	; 3
 45a:	9c 93       	st	X, r25
 45c:	8e 93       	st	-X, r24
 45e:	12 97       	sbiw	r26, 0x02	; 2
 460:	12 96       	adiw	r26, 0x02	; 2
 462:	8d 91       	ld	r24, X+
 464:	9c 91       	ld	r25, X
 466:	13 97       	sbiw	r26, 0x03	; 3
 468:	8f 3f       	cpi	r24, 0xFF	; 255
 46a:	91 05       	cpc	r25, r1
 46c:	09 f0       	breq	.+2      	; 0x470 <q_put+0x3a>
 46e:	70 f7       	brcc	.-36     	; 0x44c <q_put+0x16>
}
 470:	08 95       	ret

00000472 <q_take>:

/* it is assumed that you will not take from the queue unless it has a value */
uint8_t q_take(volatile struct cqueue *q)
{
 472:	dc 01       	movw	r26, r24
	uint8_t temp = q->array[q->front++];
 474:	8d 91       	ld	r24, X+
 476:	9c 91       	ld	r25, X
 478:	11 97       	sbiw	r26, 0x01	; 1
 47a:	fd 01       	movw	r30, r26
 47c:	e8 0f       	add	r30, r24
 47e:	f9 1f       	adc	r31, r25
 480:	24 81       	ldd	r18, Z+4	; 0x04
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	05 c0       	rjmp	.+10     	; 0x490 <q_take+0x1e>
	while (q->front >= USART_BUFF) q->front -= USART_BUFF;
 486:	8d 91       	ld	r24, X+
 488:	9c 91       	ld	r25, X
 48a:	11 97       	sbiw	r26, 0x01	; 1
 48c:	80 50       	subi	r24, 0x00	; 0
 48e:	91 40       	sbci	r25, 0x01	; 1
 490:	11 96       	adiw	r26, 0x01	; 1
 492:	9c 93       	st	X, r25
 494:	8e 93       	st	-X, r24
 496:	8d 91       	ld	r24, X+
 498:	9c 91       	ld	r25, X
 49a:	11 97       	sbiw	r26, 0x01	; 1
 49c:	8f 3f       	cpi	r24, 0xFF	; 255
 49e:	91 05       	cpc	r25, r1
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <q_take+0x32>
 4a2:	88 f7       	brcc	.-30     	; 0x486 <q_take+0x14>
	return temp;
}
 4a4:	82 2f       	mov	r24, r18
 4a6:	08 95       	ret

000004a8 <q_at>:

uint8_t q_at(volatile struct cqueue *q, uint16_t idx)
{
 4a8:	fc 01       	movw	r30, r24
	uint16_t iidx = q->front + idx;
 4aa:	80 81       	ld	r24, Z
 4ac:	91 81       	ldd	r25, Z+1	; 0x01
 4ae:	86 0f       	add	r24, r22
 4b0:	97 1f       	adc	r25, r23
	while (iidx >= USART_BUFF) iidx -= USART_BUFF;
	return q->array[iidx];
 4b2:	e8 0f       	add	r30, r24
 4b4:	f1 1d       	adc	r31, r1
 4b6:	84 81       	ldd	r24, Z+4	; 0x04
}
 4b8:	08 95       	ret

000004ba <q_gobble>:

void q_gobble(volatile struct cqueue *q, uint16_t n)
{
 4ba:	fc 01       	movw	r30, r24
	q->front += n;
 4bc:	80 81       	ld	r24, Z
 4be:	91 81       	ldd	r25, Z+1	; 0x01
 4c0:	86 0f       	add	r24, r22
 4c2:	97 1f       	adc	r25, r23
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <q_gobble+0x14>
	while (q->front >= USART_BUFF) q->front -= USART_BUFF;
 4c6:	80 81       	ld	r24, Z
 4c8:	91 81       	ldd	r25, Z+1	; 0x01
 4ca:	80 50       	subi	r24, 0x00	; 0
 4cc:	91 40       	sbci	r25, 0x01	; 1
 4ce:	91 83       	std	Z+1, r25	; 0x01
 4d0:	80 83       	st	Z, r24
 4d2:	80 81       	ld	r24, Z
 4d4:	91 81       	ldd	r25, Z+1	; 0x01
 4d6:	8f 3f       	cpi	r24, 0xFF	; 255
 4d8:	91 05       	cpc	r25, r1
 4da:	09 f0       	breq	.+2      	; 0x4de <q_gobble+0x24>
 4dc:	a0 f7       	brcc	.-24     	; 0x4c6 <q_gobble+0xc>
}
 4de:	08 95       	ret

000004e0 <q_find>:

uint16_t q_find(volatile struct cqueue *q, uint8_t val)
{
 4e0:	dc 01       	movw	r26, r24
	uint16_t idx = q->front;
 4e2:	2d 91       	ld	r18, X+
 4e4:	3c 91       	ld	r19, X
 4e6:	11 97       	sbiw	r26, 0x01	; 1
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <q_find+0x22>
	for (; idx != q->back && idx <= USART_BUFF; idx++) {
 4ea:	30 70       	andi	r19, 0x00	; 0
		while (idx >= USART_BUFF) idx -= USART_BUFF;
		if (q->array[idx] == val) return 1;
 4ec:	fd 01       	movw	r30, r26
 4ee:	e2 0f       	add	r30, r18
 4f0:	f3 1f       	adc	r31, r19
 4f2:	84 81       	ldd	r24, Z+4	; 0x04
 4f4:	86 17       	cp	r24, r22
 4f6:	19 f4       	brne	.+6      	; 0x4fe <q_find+0x1e>
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	0f c0       	rjmp	.+30     	; 0x51c <q_find+0x3c>
}

uint16_t q_find(volatile struct cqueue *q, uint8_t val)
{
	uint16_t idx = q->front;
	for (; idx != q->back && idx <= USART_BUFF; idx++) {
 4fe:	2f 5f       	subi	r18, 0xFF	; 255
 500:	3f 4f       	sbci	r19, 0xFF	; 255
 502:	12 96       	adiw	r26, 0x02	; 2
 504:	8d 91       	ld	r24, X+
 506:	9c 91       	ld	r25, X
 508:	13 97       	sbiw	r26, 0x03	; 3
 50a:	28 17       	cp	r18, r24
 50c:	39 07       	cpc	r19, r25
 50e:	21 f0       	breq	.+8      	; 0x518 <q_find+0x38>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	21 30       	cpi	r18, 0x01	; 1
 514:	38 07       	cpc	r19, r24
 516:	48 f3       	brcs	.-46     	; 0x4ea <q_find+0xa>
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
		while (idx >= USART_BUFF) idx -= USART_BUFF;
		if (q->array[idx] == val) return 1;
	}
	return 0;
}
 51c:	c9 01       	movw	r24, r18
 51e:	08 95       	ret

00000520 <q_used>:

uint16_t q_used(volatile struct cqueue *q)
{
 520:	fc 01       	movw	r30, r24
	uint16_t idx = q->back;
 522:	22 81       	ldd	r18, Z+2	; 0x02
 524:	33 81       	ldd	r19, Z+3	; 0x03
	if (idx < q->front)
 526:	80 81       	ld	r24, Z
 528:	91 81       	ldd	r25, Z+1	; 0x01
 52a:	28 17       	cp	r18, r24
 52c:	39 07       	cpc	r19, r25
 52e:	10 f4       	brcc	.+4      	; 0x534 <q_used+0x14>
		idx += USART_BUFF;
 530:	20 50       	subi	r18, 0x00	; 0
 532:	3f 4f       	sbci	r19, 0xFF	; 255
	return (idx - q->front);
 534:	80 81       	ld	r24, Z
 536:	91 81       	ldd	r25, Z+1	; 0x01
 538:	28 1b       	sub	r18, r24
 53a:	39 0b       	sbc	r19, r25
 53c:	c9 01       	movw	r24, r18
 53e:	08 95       	ret

00000540 <__prologue_saves__>:
 540:	2f 92       	push	r2
 542:	3f 92       	push	r3
 544:	4f 92       	push	r4
 546:	5f 92       	push	r5
 548:	6f 92       	push	r6
 54a:	7f 92       	push	r7
 54c:	8f 92       	push	r8
 54e:	9f 92       	push	r9
 550:	af 92       	push	r10
 552:	bf 92       	push	r11
 554:	cf 92       	push	r12
 556:	df 92       	push	r13
 558:	ef 92       	push	r14
 55a:	ff 92       	push	r15
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	ca 1b       	sub	r28, r26
 56a:	db 0b       	sbc	r29, r27
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	de bf       	out	0x3e, r29	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	cd bf       	out	0x3d, r28	; 61
 576:	09 94       	ijmp

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
